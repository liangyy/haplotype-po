if 'outdir' not in config:
    config['outdir'] = 'output'

def get_genotype_chr(pattern, i):
    return f'{prefix}{i}{suffix}'


rule all:
    input:
        '{outdir}/{prefix}.pred_expr.txt'.format(**config),
        # '{outdir}/{prefix}.summary.txt'.format(**config)

rule predict_chr:
    input:
        genotype = config['genotype_vcf_pattern'],
        pred_model = config['predictdb'],
        liftover_chain = config['liftover_chain']
    output:
        '{outdir}/{prefix}.pred_expr_{chr_num}.txt',
        '{outdir}/{prefix}.summary_{chr_num}.txt'
    log:
        '{outdir}/{prefix}.{chr_num}.log'
    shell:
        'python {config[predict_script_path]} \
          --model_db_path {input.pred_model} \
          --model_db_snp_key varID \
          --vcf_genotypes {input.genotype} \
          --vcf_mode {config[predict_mode]} \
          --liftover {input.liftover_chain} \
          --on_the_fly_mapping METADATA "chr{{}}_{{}}_{{}}_{{}}_b38" \
          --prediction_output {output[0]} \
          --prediction_summary_output {output[1]} \
          --verbosity 9 \
          --throw > {log} 2>&1'

rule merge:
    input:
        [ f'{{outdir}}/{{prefix}}.pred_expr_{chr_num}.txt' for chr_num in range(1, 23) ]
    output:
        '{outdir}/{prefix}.pred_expr.txt'
    shell:
        'python merge_pred_expr.py --input-pattern {wildcards.outdir}/{wildcards.prefix}.pred_expr_{{chr_num}}.txt --output {output[0]}'
