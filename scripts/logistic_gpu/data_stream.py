import torch
from torch.utils import data
import h5py

class ukbHapDataset(data.Dataset):
    'Characterizes a UKB HAP Dataset for PyTorch'
    def __init__(self, ukb_reader, chunk_size=5):
        '''
        Initialization.
        Need ukb_hap_reader.UKBhapReader as the reader for BGEN file.
        Read SNPs in chunk to get higher per SNP I/O speed.
        '''
        self.reader = ukb_reader
        self.chunk_size = chunk_size
        self._init_list_variant_tuple()
    
    def _init_list_variant_tuple(self):
        self.list_variant_tuple = [ [], [], [], [] ]  # list of list chrom, pos, nea, ea
        tmp = [ [], [], [], [] ]
        for i in self.reader.variant_index.keys():
            i_ = i.split(':')
            for j in range(4):
                tmp[j].append(i_[j])
            if len(tmp[0]) == self.chunk_size:
                for k in range(4):
                    self.list_variant_tuple[k].append(tmp[k]) 
                tmp = [ [], [], [], [] ]
        if len(tmp) > 0:
            for k in range(4):
                self.list_variant_tuple[k].append(tmp[k]) 
    
    def __len__(self):
        'Denotes the total number of variants'
        return len(self.reader.variant_index)

    def __getitem__(self, index):
        'Generates one chunk of variants from data'
        
        chrom = self.list_variant_tuple[0][index]
        pos = self.list_variant_tuple[1][index]
        nea = self.list_variant_tuple[2][index]
        ea = self.list_variant_tuple[3][index]
        myrow = self.reader.retrieve_from_list(
            chrom,
            pos,
            nea,
            ea
        )
        h1 = []
        h2 = []
        for i in myrow:
            h1.append(i.haplo_dosage_1)
            h2.append(i.haplo_dosage_2)
        return torch.Tensor(h1), torch.Tensor(h2)


class HDF5ukbHapDataset(data.Dataset):
    'Characterizes a UKB HAP Dataset (HDF5 generated by geno_hdf5) for PyTorch'
    def __init__(self, hdf5_file, chunk_size=50):
        '''
        Initialization.
        Need HDF5 converted from BGEN (../bgen2hdf5/geno_hdf5.py).
        Read SNPs in chunk.
        '''
        self.hdf5_file = hdf5_file
        self.hdf5_handle = None  
        self.chunk_size = chunk_size
        self._set_nvariant()
        self._init_chunks()
    
    def _init_chunks(self):
        self.nchunk = self.nvariant // self.chunk_size
        if self.nchunk * self.chunk_size < self.nvariant:
            self.nchunk += 1
        self.list_chunks = []
        start = 0
        for i in range(self.nchunk):
            self.list_chunks.append([start, min(start + self.chunk_size, self.nvariant)])
            start += self.chunk_size
    
    def _set_nvariant(self):
        with h5py.File(self.hdf5_file, 'r') as f:
            self.nvariant = len(f['position'][:])
    
    def __len__(self):
        'Denotes the total number of variant chunks'
        return self.nchunk

    def __getitem__(self, index):
        'Generates one chunk of variants from data'
        if self.hdf5_handle is None:
            self.hdf5_handle = h5py.File(self.hdf5_file, 'r')['genotype']
        start, end = self.list_chunks[index]
        h1 = self.hdf5_handle[0, start:end, :]
        h2 = self.hdf5_handle[1, start:end, :]
        return torch.Tensor(h1), torch.Tensor(h2)

